package spider65.ebike.tsdz2_esp32.data;


import android.util.Log;

import static spider65.ebike.tsdz2_esp32.TSDZConst.CONFIGURATIONS_ADV_SIZE;
import static spider65.ebike.tsdz2_esp32.TSDZConst.CONFIGURATIONS_VERSION;
import static spider65.ebike.tsdz2_esp32.utils.Utils.intDiv1000toFloat;
import static spider65.ebike.tsdz2_esp32.utils.Utils.intX10toFloat;
import static spider65.ebike.tsdz2_esp32.utils.Utils.longX10toFloat;

public class TSDZ_Configurations {

    private static final String TAG = "TSDZ_Configurations";
    public int ASSIST_LEVEL_NUMBER = 7;
    public int ui8_assist_level;
    public int ui8_wheel_max_speed;
    public int ui16_wheel_perimeter;
    public int ui8_units_type;
    public long ui32_wh_x10;
    public float f_wh;
    public long ui32_wh_x10_100_percent;
    public float f_wh_100_percent;
    public int ui8_battery_soc_enable;
    public int ui8_target_max_battery_power_div25;
    public int ui8_battery_max_current;
    public int ui8_motor_max_current;
    public int ui8_motor_current_min_adc;
    public int ui8_field_weakening;
    public int ui8_ramp_up_amps_per_second_x10;
    public float f_ramp_up_amps_per_second;
    public int ui16_battery_low_voltage_cut_off_x10;
    public float f_battery_low_voltage_cut_off;
    public int ui8_motor_type;
    public int ui8_motor_current_control_mode;
    public int ui8_motor_assistance_startup_without_pedal_rotation;
    public int[] ui16_assist_level_factor = new int[ASSIST_LEVEL_NUMBER];
    public float[] f_assist_level_factor_div100 = new float[ASSIST_LEVEL_NUMBER];
    public int ui8_number_of_assist_levels;
    public int ui8_startup_motor_power_boost_feature_enabled;
    public int ui8_startup_motor_power_boost_always;
    public int ui8_startup_motor_power_boost_limit_power;
    public int[] ui16_startup_motor_power_boost_factor = new int[ASSIST_LEVEL_NUMBER];
    public float[] f_startup_motor_power_boost_factor_div100 = new float[ASSIST_LEVEL_NUMBER];
    public int ui8_startup_motor_power_boost_time;
    public float f_startup_motor_power_boost_time;
    public int ui8_startup_motor_power_boost_fade_time;
    public float f_startup_motor_power_boost_fade_time;
    public int ui8_temperature_limit_feature_enabled;
    public int ui8_motor_temperature_min_value_to_limit;
    public int ui8_motor_temperature_max_value_to_limit;
    public int ui16_battery_voltage_reset_wh_counter_x10;
    public float f_battery_voltage_reset_wh_counter;
    public int ui8_system_power_off_time_minutes;
    public int ui16_battery_pack_resistance_x1000;
    public long ui32_odometer_x10;
    public float f_odometer;
    public int ui8_walk_assist_feature_enabled;
    public int[] ui8_walk_assist_level_factor = new int[ASSIST_LEVEL_NUMBER];
    public int ui8_torque_sensor_calibration_feature_enabled;
    public int ui8_torque_sensor_calibration_pedal_ground;
    public int ui8_torque_sensor_filter;
    public int ui8_torque_sensor_adc_threshold;
    public int[][] ui16_torque_sensor_calibration_table_left = new int[8][2];
    public int[][] ui16_torque_sensor_calibration_table_right = new int[8][2];
    public int ui8_street_mode_function_enabled;
    public int ui8_street_mode_enabled;
    public int ui8_street_mode_enabled_on_startup;
    public int ui8_street_mode_speed_limit;
    public int ui8_street_mode_power_limit_div25;
    public int street_mode_power_limit;
    public int ui8_street_mode_throttle_enabled;
    public int ui8_street_mode_hotkey_enabled;
    public int ui8_pedal_cadence_fast_stop;
    public int ui8_throttle_virtual_step;
    public int ui8_coast_brake_enable;
    public int ui8_coast_brake_adc;
    public int ui8_ant_device_id;

    public boolean setData(byte[] data) {
        if (data.length != CONFIGURATIONS_ADV_SIZE) {
            Log.e(TAG, "setData: wrong data size");
            return false;
        }

        if (data[0] == (byte) CONFIGURATIONS_VERSION) {
            ui8_assist_level = data[1];
            ui16_wheel_perimeter = ((data[3] & 255) << 8) + (data[2] & 255);
            ui8_wheel_max_speed = data[4];
            ui8_units_type = data[5];
            ui32_wh_x10 = (data[6] & 255) + ((data[7] & 255) << 8) + ((data[8] & 255) << 16) + ((data[9] & 255) << 24);
            f_wh = intX10toFloat((int) ui32_wh_x10);
            ui32_wh_x10_100_percent = (data[10] & 255) + ((data[11] & 255) << 8) + ((data[12] & 255) << 16) + ((data[13] & 255) << 24);
            f_wh_100_percent = intX10toFloat((int) ui32_wh_x10_100_percent);
            ui8_battery_soc_enable = data[14];
            ui8_target_max_battery_power_div25 = data[15];
            ui8_battery_max_current = data[16];
            ui8_motor_max_current = data[17];
            ui8_motor_current_min_adc = data[18];
            ui8_field_weakening = data[19];
            ui8_ramp_up_amps_per_second_x10 = data[20];
            f_ramp_up_amps_per_second = intX10toFloat(ui8_ramp_up_amps_per_second_x10 & 255);
            ui16_battery_low_voltage_cut_off_x10 = ((data[22] & 255) << 8) + (data[21] & 255);
            f_battery_low_voltage_cut_off = intX10toFloat(ui16_battery_low_voltage_cut_off_x10);
            ui8_motor_type = data[23];
            ui8_motor_current_control_mode = data[24];
            ui8_motor_assistance_startup_without_pedal_rotation = data[25];
            ui16_assist_level_factor[0] = ((data[27] & 255) << 8) + (data[26] & 255);
            f_assist_level_factor_div100[0] = intDiv1000toFloat(ui16_assist_level_factor[0]);
            ui16_assist_level_factor[1] = ((data[29] & 255) << 8) + (data[28] & 255);
            f_assist_level_factor_div100[1] = intDiv1000toFloat(ui16_assist_level_factor[1]);
            ui16_assist_level_factor[2] = ((data[31] & 255) << 8) + (data[30] & 255);
            f_assist_level_factor_div100[2] = intDiv1000toFloat(ui16_assist_level_factor[2]);
            ui16_assist_level_factor[3] = ((data[33] & 255) << 8) + (data[32] & 255);
            f_assist_level_factor_div100[3] = intDiv1000toFloat(ui16_assist_level_factor[3]);
            ui16_assist_level_factor[4] = ((data[33] & 255) << 8) + (data[34] & 255);
            f_assist_level_factor_div100[4] = intDiv1000toFloat(ui16_assist_level_factor[4]);
            ui16_assist_level_factor[5] = ((data[37] & 255) << 8) + (data[36] & 255);
            f_assist_level_factor_div100[5] = intDiv1000toFloat(ui16_assist_level_factor[5]);
            ui16_assist_level_factor[6] = ((data[39] & 255) << 8) + (data[38] & 255);
            f_assist_level_factor_div100[6] = intDiv1000toFloat(ui16_assist_level_factor[6]);
            ui8_number_of_assist_levels = data[40];
            ui8_startup_motor_power_boost_feature_enabled = data[41];
            ui8_startup_motor_power_boost_always = data[42];
            ui8_startup_motor_power_boost_limit_power = data[43];
            ui16_startup_motor_power_boost_factor[0] = ((data[45] & 255) << 8) + (data[44] & 255);
            f_startup_motor_power_boost_factor_div100[0] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[0]);
            ui16_startup_motor_power_boost_factor[1] = ((data[47] & 255) << 8) + (data[46] & 255);
            f_startup_motor_power_boost_factor_div100[1] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[1]);
            ui16_startup_motor_power_boost_factor[2] = ((data[49] & 255) << 8) + (data[48] & 255);
            f_startup_motor_power_boost_factor_div100[2] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[2]);
            ui16_startup_motor_power_boost_factor[3] = ((data[51] & 255) << 8) + (data[50] & 255);
            f_startup_motor_power_boost_factor_div100[3] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[3]);
            ui16_startup_motor_power_boost_factor[4] = ((data[53] & 255) << 8) + (data[52] & 255);
            f_startup_motor_power_boost_factor_div100[4] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[4]);
            ui16_startup_motor_power_boost_factor[5] = ((data[55] & 255) << 8) + (data[54] & 255);
            f_startup_motor_power_boost_factor_div100[5] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[5]);
            ui16_startup_motor_power_boost_factor[6] = ((data[160] & 255) << 8) + (data[159] & 255);
            f_startup_motor_power_boost_factor_div100[6] = intDiv1000toFloat(ui16_startup_motor_power_boost_factor[6]);
            ui8_startup_motor_power_boost_time = data[56];
            f_startup_motor_power_boost_time = intX10toFloat(ui8_startup_motor_power_boost_time & 0xFF);
            ui8_startup_motor_power_boost_fade_time = data[57];
            f_startup_motor_power_boost_fade_time = intX10toFloat(ui8_startup_motor_power_boost_fade_time & 0xFF);
            ui8_temperature_limit_feature_enabled = data[58];
            ui8_motor_temperature_min_value_to_limit = data[59];
            ui8_motor_temperature_max_value_to_limit = data[60];
            ui8_coast_brake_enable = data[61];
            ui8_coast_brake_adc = data[62];
            ui16_battery_voltage_reset_wh_counter_x10 = ((data[64] & 255) << 8) + (data[63] & 255);
            f_battery_voltage_reset_wh_counter = intX10toFloat(ui16_battery_voltage_reset_wh_counter_x10);
            ui8_system_power_off_time_minutes = data[65];
            ui16_battery_pack_resistance_x1000 = ((data[67] & 255) << 8) + (data[66] & 255);
            ui32_odometer_x10 = ((data[71] & 255) << 24) + ((data[70] & 255) << 16) + ((data[69] & 255) << 8) + (data[68] & 255);
            f_odometer = longX10toFloat(ui32_odometer_x10);
            ui8_walk_assist_feature_enabled = data[72];
            ui8_walk_assist_level_factor[0] = data[73];
            ui8_walk_assist_level_factor[1] = data[74];
            ui8_walk_assist_level_factor[2] = data[75];
            ui8_walk_assist_level_factor[3] = data[76];
            ui8_walk_assist_level_factor[4] = data[77];
            ui8_walk_assist_level_factor[5] = data[78];
            ui8_walk_assist_level_factor[6] = data[79];
            ui8_torque_sensor_calibration_feature_enabled = data[80];
            ui8_torque_sensor_calibration_pedal_ground = data[81];
            ui8_torque_sensor_filter = data[82];
            ui8_torque_sensor_adc_threshold = data[83];
            ui16_torque_sensor_calibration_table_left[0][0] = ((data[85] & 255) << 8) + (data[84] & 255);
            ui16_torque_sensor_calibration_table_left[0][1] = ((data[87] & 255) << 8) + (data[86] & 255);
            ui16_torque_sensor_calibration_table_left[1][0] = ((data[89] & 255) << 8) + (data[88] & 255);
            ui16_torque_sensor_calibration_table_left[1][1] = ((data[91] & 255) << 8) + (data[90] & 255);
            ui16_torque_sensor_calibration_table_left[2][0] = ((data[93] & 255) << 8) + (data[92] & 255);
            ui16_torque_sensor_calibration_table_left[2][1] = ((data[95] & 255) << 8) + (data[94] & 255);
            ui16_torque_sensor_calibration_table_left[3][0] = ((data[97] & 255) << 8) + (data[96] & 255);
            ui16_torque_sensor_calibration_table_left[3][1] = ((data[99] & 255) << 8) + (data[98] & 255);
            ui16_torque_sensor_calibration_table_left[4][0] = ((data[101] & 255) << 8) + (data[100] & 255);
            ui16_torque_sensor_calibration_table_left[4][1] = ((data[103] & 255) << 8) + (data[102] & 255);
            ui16_torque_sensor_calibration_table_left[5][0] = ((data[105] & 255) << 8) + (data[104] & 255);
            ui16_torque_sensor_calibration_table_left[5][1] = ((data[107] & 255) << 8) + (data[106] & 255);
            ui16_torque_sensor_calibration_table_left[6][0] = ((data[109] & 255) << 8) + (data[108] & 255);
            ui16_torque_sensor_calibration_table_left[6][1] = ((data[111] & 255) << 8) + (data[110] & 255);
            ui16_torque_sensor_calibration_table_left[7][0] = ((data[113] & 255) << 8) + (data[112] & 255);
            ui16_torque_sensor_calibration_table_left[7][1] = ((data[115] & 255) << 8) + (data[114] & 255);
            ui16_torque_sensor_calibration_table_right[0][0] = ((data[117] & 255) << 8) + (data[116] & 255);
            ui16_torque_sensor_calibration_table_right[0][1] = ((data[119] & 255) << 8) + (data[118] & 255);
            ui16_torque_sensor_calibration_table_right[1][0] = ((data[121] & 255) << 8) + (data[120] & 255);
            ui16_torque_sensor_calibration_table_right[1][1] = ((data[123] & 255) << 8) + (data[122] & 255);
            ui16_torque_sensor_calibration_table_right[2][0] = ((data[125] & 255) << 8) + (data[124] & 255);
            ui16_torque_sensor_calibration_table_right[2][1] = ((data[127] & 255) << 8) + (data[126] & 255);
            ui16_torque_sensor_calibration_table_right[3][0] = ((data[129] & 255) << 8) + (data[128] & 255);
            ui16_torque_sensor_calibration_table_right[3][1] = ((data[131] & 255) << 8) + (data[130] & 255);
            ui16_torque_sensor_calibration_table_right[4][0] = ((data[133] & 255) << 8) + (data[132] & 255);
            ui16_torque_sensor_calibration_table_right[4][1] = ((data[135] & 255) << 8) + (data[134] & 255);
            ui16_torque_sensor_calibration_table_right[5][0] = ((data[137] & 255) << 8) + (data[136] & 255);
            ui16_torque_sensor_calibration_table_right[5][1] = ((data[139] & 255) << 8) + (data[138] & 255);
            ui16_torque_sensor_calibration_table_right[6][0] = ((data[141] & 255) << 8) + (data[140] & 255);
            ui16_torque_sensor_calibration_table_right[6][1] = ((data[143] & 255) << 8) + (data[142] & 255);
            ui16_torque_sensor_calibration_table_right[7][0] = ((data[145] & 255) << 8) + (data[144] & 255);
            ui16_torque_sensor_calibration_table_right[7][1] = ((data[147] & 255) << 8) + (data[146] & 255);
            ui8_street_mode_function_enabled = data[148];
            ui8_street_mode_enabled = data[149];
            ui8_street_mode_enabled_on_startup = data[150];
            ui8_street_mode_speed_limit = data[151];
            ui8_street_mode_power_limit_div25 = data[152];
            street_mode_power_limit = ui8_street_mode_power_limit_div25 * 25;
            ui8_street_mode_throttle_enabled = data[153];
            ui8_street_mode_hotkey_enabled = data[154];
            ui8_pedal_cadence_fast_stop = data[155];
            ui8_throttle_virtual_step = data[156];
            ui8_street_mode_enabled = data[157];
            ui8_ant_device_id = data[158];

            return true;
        }

        Log.e(TAG, "setData: wrong configurations version");
        return false;
    }

    public byte[] toByteArray() {
        byte[] data = new byte[CONFIGURATIONS_ADV_SIZE];
        data[0] = (byte) CONFIGURATIONS_VERSION; // configurations version
        data[1] = (byte) ui8_assist_level;
        data[2] = (byte) (ui16_wheel_perimeter & 0xff);
        data[3] = (byte) (ui16_wheel_perimeter >>> 8);
        data[4] = (byte) ui8_wheel_max_speed;
        data[5] = (byte) ui8_units_type;
        data[6] = (byte) (ui32_wh_x10 & 0xff);
        data[7] = (byte) (ui32_wh_x10 >>> 8);
        data[8] = (byte) (ui32_wh_x10 >>> 16);
        data[9] = (byte) (ui32_wh_x10 >>> 24);
        data[10] = (byte) (ui32_wh_x10_100_percent & 0xff);
        data[11] = (byte) (ui32_wh_x10_100_percent >>> 8);
        data[12] = (byte) (ui32_wh_x10_100_percent >>> 16);
        data[13] = (byte) (ui32_wh_x10_100_percent >>> 24);
        data[14] = (byte) ui8_battery_soc_enable;
        data[15] = (byte) ui8_target_max_battery_power_div25;
        data[16] = (byte) ui8_battery_max_current;
        data[17] = (byte) ui8_motor_max_current;
        data[18] = (byte) ui8_motor_current_min_adc;
        data[19] = (byte) ui8_field_weakening;
        data[20] = (byte) ui8_ramp_up_amps_per_second_x10;
        data[21] = (byte) (ui16_battery_low_voltage_cut_off_x10 & 0xff);
        data[22] = (byte) (ui16_battery_low_voltage_cut_off_x10 >>> 8);
        data[23] = (byte) ui8_motor_type;
        data[24] = (byte) ui8_motor_current_control_mode;
        data[25] = (byte) ui8_motor_assistance_startup_without_pedal_rotation;
        data[26] = (byte) (ui16_assist_level_factor[0] & 0xff);
        data[27] = (byte) (ui16_assist_level_factor[0] >> 8);
        data[28] = (byte) (ui16_assist_level_factor[1] & 0xff);
        data[29] = (byte) (ui16_assist_level_factor[1] >> 8);
        data[30] = (byte) (ui16_assist_level_factor[2] & 0xff);
        data[31] = (byte) (ui16_assist_level_factor[2] >> 8);
        data[32] = (byte) (ui16_assist_level_factor[3] & 0xff);
        data[33] = (byte) (ui16_assist_level_factor[3] >> 8);
        data[34] = (byte) (ui16_assist_level_factor[4] & 0xff);
        data[35] = (byte) (ui16_assist_level_factor[4] >> 8);
        data[36] = (byte) (ui16_assist_level_factor[5] & 0xff);
        data[37] = (byte) (ui16_assist_level_factor[5] >> 8);
        data[38] = (byte) (ui16_assist_level_factor[6] & 0xff);
        data[39] = (byte) (ui16_assist_level_factor[6] >> 8);
        data[40] = (byte) ui8_number_of_assist_levels;
        data[41] = (byte) ui8_startup_motor_power_boost_feature_enabled;
        data[42] = (byte) ui8_startup_motor_power_boost_always;
        data[43] = (byte) ui8_startup_motor_power_boost_limit_power;
        data[44] = (byte) (ui16_startup_motor_power_boost_factor[0] & 0xff);
        data[45] = (byte) (ui16_startup_motor_power_boost_factor[0] >> 8);
        data[46] = (byte) (ui16_startup_motor_power_boost_factor[1] & 0xff);
        data[47] = (byte) (ui16_startup_motor_power_boost_factor[1] >> 8);
        data[48] = (byte) (ui16_startup_motor_power_boost_factor[2] & 0xff);
        data[49] = (byte) (ui16_startup_motor_power_boost_factor[2] >> 8);
        data[50] = (byte) (ui16_startup_motor_power_boost_factor[3] & 0xff);
        data[51] = (byte) (ui16_startup_motor_power_boost_factor[3] >> 8);
        data[52] = (byte) (ui16_startup_motor_power_boost_factor[4] & 0xff);
        data[53] = (byte) (ui16_startup_motor_power_boost_factor[4] >> 8);
        data[54] = (byte) (ui16_startup_motor_power_boost_factor[5] & 0xff);
        data[55] = (byte) (ui16_startup_motor_power_boost_factor[5] >> 8);
        data[159] = (byte) (ui16_startup_motor_power_boost_factor[6] & 0xff);
        data[160] = (byte) (ui16_startup_motor_power_boost_factor[6] >> 8);
        data[56] = (byte) ui8_startup_motor_power_boost_time;
        data[57] = (byte) ui8_startup_motor_power_boost_fade_time;
        data[58] = (byte) ui8_temperature_limit_feature_enabled;
        data[59] = (byte) ui8_motor_temperature_min_value_to_limit;
        data[60] = (byte) ui8_motor_temperature_max_value_to_limit;
        data[61] = (byte) ui8_coast_brake_enable;
        data[62] = (byte) ui8_coast_brake_adc;
        data[63] = (byte) (ui16_battery_voltage_reset_wh_counter_x10 & 0xff);
        data[64] = (byte) (ui16_battery_voltage_reset_wh_counter_x10 >> 8);
        data[65] = (byte) ui8_system_power_off_time_minutes;
        data[66] = (byte) (ui16_battery_pack_resistance_x1000 & 0xff);
        data[67] = (byte) (ui16_battery_pack_resistance_x1000 >> 8);

        data[68] = (byte) (ui32_odometer_x10 & 0xff);
        data[69] = (byte) ((ui32_odometer_x10 >> 8) & 0xff);
        data[70] = (byte) ((ui32_odometer_x10 >> 16) & 0xff);
        data[71] = (byte) ((ui32_odometer_x10 >> 24) & 0xff);
        data[72] = (byte) ui8_walk_assist_feature_enabled;
        data[73] = (byte) ui8_walk_assist_level_factor[0];
        data[74] = (byte) ui8_walk_assist_level_factor[1];
        data[75] = (byte) ui8_walk_assist_level_factor[2];
        data[76] = (byte) ui8_walk_assist_level_factor[3];
        data[77] = (byte) ui8_walk_assist_level_factor[4];
        data[78] = (byte) ui8_walk_assist_level_factor[5];
        data[79] = (byte) ui8_walk_assist_level_factor[6];
        data[80] = (byte) ui8_torque_sensor_calibration_feature_enabled;
        data[81] = (byte) ui8_torque_sensor_calibration_pedal_ground;
        data[82] = (byte) ui8_torque_sensor_filter;
        data[83] = (byte) ui8_torque_sensor_adc_threshold;
        data[84] = (byte) (ui16_torque_sensor_calibration_table_left[0][0] & 0xff);
        data[85] = (byte) (ui16_torque_sensor_calibration_table_left[0][0] >> 8);
        data[86] = (byte) (ui16_torque_sensor_calibration_table_left[0][1] & 0xff);
        data[87] = (byte) (ui16_torque_sensor_calibration_table_left[0][1] >> 8);
        data[88] = (byte) (ui16_torque_sensor_calibration_table_left[1][0] & 0xff);
        data[89] = (byte) (ui16_torque_sensor_calibration_table_left[1][0] >> 8);
        data[90] = (byte) (ui16_torque_sensor_calibration_table_left[1][1] & 0xff);
        data[91] = (byte) (ui16_torque_sensor_calibration_table_left[1][1] >> 8);
        data[92] = (byte) (ui16_torque_sensor_calibration_table_left[2][0] & 0xff);
        data[93] = (byte) (ui16_torque_sensor_calibration_table_left[2][0] >> 8);
        data[94] = (byte) (ui16_torque_sensor_calibration_table_left[2][1] & 0xff);
        data[95] = (byte) (ui16_torque_sensor_calibration_table_left[2][1] >> 8);
        data[96] = (byte) (ui16_torque_sensor_calibration_table_left[3][0] & 0xff);
        data[97] = (byte) (ui16_torque_sensor_calibration_table_left[3][0] >> 8);
        data[98] = (byte) (ui16_torque_sensor_calibration_table_left[3][1] & 0xff);
        data[99] = (byte) (ui16_torque_sensor_calibration_table_left[3][1] >> 8);
        data[100] = (byte) (ui16_torque_sensor_calibration_table_left[4][0] & 0xff);
        data[101] = (byte) (ui16_torque_sensor_calibration_table_left[4][0] >> 8);
        data[102] = (byte) (ui16_torque_sensor_calibration_table_left[4][1] & 0xff);
        data[103] = (byte) (ui16_torque_sensor_calibration_table_left[4][1] >> 8);
        data[104] = (byte) (ui16_torque_sensor_calibration_table_left[5][0] & 0xff);
        data[105] = (byte) (ui16_torque_sensor_calibration_table_left[5][0] >> 8);
        data[106] = (byte) (ui16_torque_sensor_calibration_table_left[5][1] & 0xff);
        data[107] = (byte) (ui16_torque_sensor_calibration_table_left[5][1] >> 8);
        data[108] = (byte) (ui16_torque_sensor_calibration_table_left[6][0] & 0xff);
        data[109] = (byte) (ui16_torque_sensor_calibration_table_left[6][0] >> 8);
        data[110] = (byte) (ui16_torque_sensor_calibration_table_left[6][1] & 0xff);
        data[111] = (byte) (ui16_torque_sensor_calibration_table_left[6][1] >> 8);
        data[112] = (byte) (ui16_torque_sensor_calibration_table_left[7][0] & 0xff);
        data[113] = (byte) (ui16_torque_sensor_calibration_table_left[7][0] >> 8);
        data[114] = (byte) (ui16_torque_sensor_calibration_table_left[7][1] & 0xff);
        data[115] = (byte) (ui16_torque_sensor_calibration_table_left[7][1] >> 8);
        data[116] = (byte) (ui16_torque_sensor_calibration_table_right[0][0] & 0xff);
        data[117] = (byte) (ui16_torque_sensor_calibration_table_right[0][0] >> 8);
        data[118] = (byte) (ui16_torque_sensor_calibration_table_right[0][1] & 0xff);
        data[119] = (byte) (ui16_torque_sensor_calibration_table_right[0][1] >> 8);
        data[120] = (byte) (ui16_torque_sensor_calibration_table_right[1][0] & 0xff);
        data[121] = (byte) (ui16_torque_sensor_calibration_table_right[1][0] >> 8);
        data[122] = (byte) (ui16_torque_sensor_calibration_table_right[1][1] & 0xff);
        data[123] = (byte) (ui16_torque_sensor_calibration_table_right[1][1] >> 8);
        data[124] = (byte) (ui16_torque_sensor_calibration_table_right[2][0] & 0xff);
        data[125] = (byte) (ui16_torque_sensor_calibration_table_right[2][0] >> 8);
        data[126] = (byte) (ui16_torque_sensor_calibration_table_right[2][1] & 0xff);
        data[127] = (byte) (ui16_torque_sensor_calibration_table_right[2][1] >> 8);
        data[128] = (byte) (ui16_torque_sensor_calibration_table_right[3][0] & 0xff);
        data[129] = (byte) (ui16_torque_sensor_calibration_table_right[3][0] >> 8);
        data[130] = (byte) (ui16_torque_sensor_calibration_table_right[3][1] & 0xff);
        data[131] = (byte) (ui16_torque_sensor_calibration_table_right[3][1] >> 8);
        data[132] = (byte) (ui16_torque_sensor_calibration_table_right[4][0] & 0xff);
        data[133] = (byte) (ui16_torque_sensor_calibration_table_right[4][0] >> 8);
        data[134] = (byte) (ui16_torque_sensor_calibration_table_right[4][1] & 0xff);
        data[135] = (byte) (ui16_torque_sensor_calibration_table_right[4][1] >> 8);
        data[136] = (byte) (ui16_torque_sensor_calibration_table_right[5][0] & 0xff);
        data[137] = (byte) (ui16_torque_sensor_calibration_table_right[5][0] >> 8);
        data[138] = (byte) (ui16_torque_sensor_calibration_table_right[5][1] & 0xff);
        data[139] = (byte) (ui16_torque_sensor_calibration_table_right[5][1] >> 8);
        data[140] = (byte) (ui16_torque_sensor_calibration_table_right[6][0] & 0xff);
        data[141] = (byte) (ui16_torque_sensor_calibration_table_right[6][0] >> 8);
        data[142] = (byte) (ui16_torque_sensor_calibration_table_right[6][1] & 0xff);
        data[143] = (byte) (ui16_torque_sensor_calibration_table_right[6][1] >> 8);
        data[144] = (byte) (ui16_torque_sensor_calibration_table_right[7][0] & 0xff);
        data[145] = (byte) (ui16_torque_sensor_calibration_table_right[7][0] >> 8);
        data[146] = (byte) (ui16_torque_sensor_calibration_table_right[7][1] & 0xff);
        data[147] = (byte) (ui16_torque_sensor_calibration_table_right[7][1] >> 8);
        data[148] = (byte) ui8_street_mode_function_enabled;
        data[149] = (byte) ui8_street_mode_enabled;
        data[150] = (byte) ui8_street_mode_enabled_on_startup;
        data[151] = (byte) ui8_street_mode_speed_limit;
        data[152] = (byte) ui8_street_mode_power_limit_div25;
        data[153] = (byte) ui8_street_mode_throttle_enabled;
        data[154] = (byte) ui8_street_mode_hotkey_enabled;
        data[155] = (byte) ui8_pedal_cadence_fast_stop;
        data[156] = (byte) ui8_throttle_virtual_step;
        data[157] = (byte) ui8_street_mode_enabled;
        data[158] = (byte) ui8_ant_device_id;

        return data;
    }
}
